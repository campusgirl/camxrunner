--------------------------------------------------------------------------------
UPGRADING TO v4.40

V4.40 is an extension from the previous release (v4.3x).  Version 4.40
includes several modifications to the PiG and PM chemistry modules, and
introduces the capability to output concentration fields in HDF5 format
following the conventions of the RAMS meteorological model. Changes have
been made to the way average, instantaneous, deposition, and Probing Tool
files are output.  This version also provides several bug fixes.

*** VERSION 4.40 INCLUDES CHANGES TO CAMx OUTPUT FILES ***

Gridded Fortran binary output average, deposition, and Probing Tool files
are now written as separate standard UAM format files, one for each grid.
The output file naming convention has changed to include the grid number in
the filename suffix.

Instantaneous restart files remain in the original master/nested grid format,
but the odd/even designation has been removed (files are written only once,
at the end of the simulation period).  

*** VERSION 4.40 INCLUDES CHANGES TO THE CAMx CONTROL FILE (CAMx.IN) ***

With the changes to the gridded Fortran binary output files described above,
make sure that you change your CAMx.in files to point to the correct
instantaneous restart file names (i.e., remove the "1" or "2" extensions).
See the v4.40 control file template.

*** VERSION 4.40 INCLUDES CHANGES TO THE MAKEFILE ***

The MAKEFILE now includes an optional command line argument to control 
whether CAMx executable is to be linked with the HDF5 library.  See the
section below on how to compile CAMx.

*** INTEL COMPILER IMPROVES MODEL SPEED USING OMP WITH PM CHEMISTRY ***

We have historically used the Portland Group compiler to build CAMx on
Linux PCs, but have seen no speed improvements using OMP parallelization
when Mechanism 4 (PM) is run with a PGF executable.  We have tracked this
to the way PGF compiles the ISOROPIA PM chemistry algorithm.

Use of the INTEL compiler appears to correctly compile ISORROPIA with OMP,
and Intel/OMP does dramatically improve model speed when running with
Mechanism 4 (PM).  You should consider the Intel compiler a viable option
to PGF.  See the section below on multi-processor support.

--------------------------------------------------------------------------------
INTRODUCTION

This is the README file for the CAMx model.  Topics covered are the 
license agreement, compiling CAMx, the test case, and multi-processor
support.  

Further details are in the CAMx User's Guide, available from 
http://www.camx.com, and the release notes.

Send questions or comments via email to: CAMx@environ.org
Please read the documentation first.


LICENSE AGREEMENT

Read the file LICENSE included with the source code and read the web 
page where the CAMx source code is posted for download 
(http://www.camx.com). You agree to the CAMx license terms by 
downloading the source code and/or using the CAMx model.


USING THE CAMx MAKEFILE

The syntax for building CAMx is:

make platform <DOMAIN=domain_name> <HDF=true>

The CAMx makefile has three arguments, one mandatory ("platform") and two 
optional (DOMAIN and HDF).

"platform" specifies what type of workstation you have and must
be one of the following:

dec         -- DEC alpha workstation with digital Unix
               (uses big_endian representation for FORTRAN unformatted 
               files rather than the DEC default, which is little
               endian)
sun         -- Sun Ultra Sparcstation
sgi         -- SGI workstation
sgiomp      -- SGI workstation with compiler flags to enable OMP
ibm         -- IBM workstation
hp          -- HP/UX workstation
pg_linux    -- ix86 PC running Linux and using FORTRAN compiler from the 
               The Portland Group (pgf77)
               (uses big_endian representation for FORTRAN unformatted 
               files rather than the PC default, which is little
               endian)
pg_linuxomp -- Linux workstation with pgf77 compiler flags to enable OMP
i_linux     -- ix86 PC running Linux and using FORTRAN compiler from 
               Intel (ifort)
               (uses big_endian representation for FORTRAN unformatted 
               files rather than the PC default, which is little
               endian)
i_linuxomp  -- Linux workstation with Intel compiler flags to enable OMP
ab_linux    -- Linux Mac OSX 64-bit operating system using the Absoft compiler

"domain_name" is a string identifying which camx.prm include file to 
use in the compilation.  The camx.prm file, found in the ./Includes/ 
subdirectory, contains the domain definition parameters for your
simulation (See the CAMx User's Guide for more details).  This
makefile syntax is designed to allow you to keep several different
CAMx configurations (camx.prm files) and selectively build executables 
for each application.  The "DOMAIN=domain_name" argument is optional, 
and if omitted the default camx.prm.mrpo.12.36 configuration will be used.

"HDF=true" flags the make utility to include HDF5 libraries into the CAMx
executable.  This only enables CAMx to generate HDF5 output files; the user 
maintains control of whether to output HDF5 concentration files by setting
the "HDF_Format_Output" variable in the CAMx CONTROL namelist when
the model is run.  If "HDF=true" is not specified, the make utility will 
proceed to compile CAMx without HDF5 libraries.

For example, to build CAMx on a DEC/Alpha workstation using the 
include file ./Includes/camx.prm.myapp, enter the make command:

make dec DOMAIN=myapp

The executable will be named CAMx.myapp.dec

If you need to rebuild CAMx using different makefile arguments
we recommend typing "make clean" between builds.  Make clean will
delete all existing object files forcing a complete re-build.

If your workstation is not supported by the standard makefile, you will
need to modify the Makefile for use with your system.  If so, please 
mail the working Makefile along with a description of your computer 
system to CAMx@environ.org so that we can share this information.


CAMx TEST CASE

A test case is provided to help new CAMx User's get started and
permit performance benchmarking.  The test case is for the "MRPO"
June 13-14 2002 simulation of the Eastern US.  Build a CAMx executable
for this domain using the makefile options discussed above.
The test case has 1 nested fine grid and requires about 250 MBytes
of memory.

The test case (2 days of simulation) including inputs and
outputs is available via FTP at www.camx.com or at the CAMx FTP site:

        Hostname: ftp.camx.com
        Username: anonymous
        Directory: CAMx_testcase 

See the README file on the FTP server to determine which files you 
need to download.  You can compare your results to the test case 
benchmark by displaying the concentration outputs (using PAVE, for 
example).  You can perform a more rigorous check by comparing the 
coarse grid average concentration outputs using the "AVGDIF" program.  
This program is on the CAMx web site in the processors area.  We 
expect concentrations to agree within the limits of single precision 
calculation, namely relative errors of about 1 in 100,000.


MULTI-PROCESSOR SUPPORT

CAMx supports multiple processors by using OpenMP compiler directives.  
This only works for shared memory systems.  For example, you can take
advantage of a dual processor Linux PC, but not a Linux cluster.  The 
OMP option has been tested for Linux and SGI workstations, and the 
makefile has options "sgiomp", "pg_linuxomp", and "i_linuxomp".  You 
must build a CAMx executable with OMP enabled before you can use multiple 
processors.

Portland Group Compiler:

When running the mulitprocessor version (OMP) on a Linux platform using 
the Portland Group Compiler, you must set some environment variables 
in the job script to take advantage of multiprocessor capability:
 
NCPUS  -- number of processors available to program
MPSTKZ -- per thread stack size
          There have been problems with some parallel programs on
          Linux systems when the per-thread stack size is set to the
          default (2MB). If you have unexplained failures, try
          setting this environment variable to a larger value, such as
          8MB or even as large as 64MB for a large application.
 
For large applications, you will probably also want to increase the
stack size available to the shell executing the model by using the
limit command:
 
limit stacksize unlimited
 
For example, the first 4 lines of a job script to execute a 
PGF multi-processor version of CAMx should look like:
 
#!/bin/csh
setenv NCPUS 2
setenv MPSTKZ 32M
limit stacksize unlimited
 
Intel Compiler:

When running the mulitprocessor version (OMP) on a Linux platform using 
the Intel Compiler, the executable by default will use all of the CPUs
present on the motherboard.  However, you can specifically set the
number of CPUs to use by setting the following environment variable:

#!/bin/csh
setenv OMP_NUM_THREADS 4
limit stacksize unlimited (optional)


THE CAMx CONTROL FILE

The CAMx control file is in a FORTRAN Namelist format.  Job scripts and 
control files developed for CAMx prior to v4.20 WILL NOT WORK WITH THIS
VERSION. To facilitate migration of existing applications to version
v4.20 and later, we have provided a new file in the source directory:

CAMx.namelist.template

This file contains a complete list of the namelist variables needed to
configure the model and to choose various options in CAMx.  Use this as
a reference when creating your CAMx control file by scratch.

