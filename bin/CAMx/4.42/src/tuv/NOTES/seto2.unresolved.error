While updating the Schuman-Runge parameterization implementation (seto2.f), I
ran into a Segmentation fault within the last inner loop of the subroutine:

      DO iz = 1, nz
         [...]
         DO iw = 1, nw-1
            xso2(iz,iw) = xsuser(iw)/(wl(iw+1)-wl(iw))
         ENDDO

      ENDDO
  
      RETURN

The value of nz after that loop got somehow corrupted during the second
iteration of iz (iz = 2).  After a number of tests, the problem magically
disappeared without significant changes to the code (i.e. changes only included
I/O statements).  

Theory:

It is possible that we hit another faulty spot in the compiler.  The following
is a clipping from the source listing (although it should also be mentioned,
that the problematic version has never been compiled with the -qsource option):

AIX XL Fortran Compiler  Version 03.01.0002.0002 --- seto2.f 08/09/96 09:30:11
***   Options In Effect   ***

         ==  On / Off Options  ==
         ESCAPE        I4            OBJECT        SAVE          SOURCE
         NOZEROSIZE

         ==  Options Of Integer Type ==
         CHARLEN(500)          FIXED(72)             MAXMEM(2048)
         SPILLSIZE(512)

         ==  Options Of Character Type  ==
         ALIAS(STD,INTPTR)     AUTODBL(NONE)         DIRECTIVE()
         FLAG(I,I)             FLOAT(MAF,FOLD)       HALT(U)
         IEEE(NEAR)            INTSIZE(4)            LANGLVL(90EXT)
         POSITION(APPENDOLD)   REALSIZE(4)
XLF77(NOLEADZERO,GEDIT77,NO
BLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT)

Another possibility is that there is a flaw in the make version used, and that
for some reason something didn't get compiled although it should have been, and
it slipped my attention.  Then, when making the various tests, somehow the
compilation was triggered and the problem disappeared.

If you happen to run into this, please let me know!
