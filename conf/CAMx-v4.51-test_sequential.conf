################################################################################
#
# Runner script for CAMx 4.42/4.51 - Configuration. 
# See http://people.web.psi.ch/oderbolz/CAMxRunner
# 
# Leave the next line intact, it is used for change detection
# Version: $Id$ 
#
# Written by Daniel C. Oderbolz (CAMxRunner@psi.ch),
# Released under the Creative Commons "Attribution-Share Alike 2.5 Switzerland"
# License, (http://creativecommons.org/licenses/by-sa/2.5/ch/deed.en)
################################################################################
#
# All Variables (except system variables like OMP*) names start with CXR_
# Output File names end with OUTPUT_FILE
# Input File names end with INPUT_FILE
#
# Arrays of files are called OUTPUT_ARR_FILES AND INPUT_ARR_FILES
#
# Directories with _DIR
# Output directories with OUTPUT_DIR
# Executables with _EXEC
#
# Strings which are used as Floating point numbers, but are integer, need a trailing .
#
# Arrays must have an index 0 with a Dummy entry, we work in Fortran Land here.
#
# Also, entries in arrays which contain spaces must be protected by
# single (') quotes, because arrays are exported as space separated list

################################################################################
# Notification options
################################################################################
CXR_MAILADDR=CAMxRunner@psi.ch
CXR_SMSNR=0765888275
CXR_SMSPROVIDER=sms.switch.ch
CXR_SMSADDR=${CXR_SMSNR}@${CXR_SMSPROVIDER}

#If this Variable is true, SMS will be sent
CXR_SEND_SMS=false

################################################################################
# Timespan of simulation
################################################################################

# The Start of the simulation in YYYY-MM-DD notation
CXR_START_DATE=2007-01-01

# The Stop of the simulation in YYYY-MM-DD notation
CXR_STOP_DATE=2007-01-31

################################################################################
# Labels
################################################################################
CXR_MET_PROJECT=uw3
CXR_MET_SCENARIO=s151

CXR_EMMISS_PROJECT=${CXR_MET_PROJECT}
CXR_EMMISS_SCENARIO=sem050
CXR_CAMX_PERIOD=winter07
CXR_CAMX_CUSTOMER=bafu3

CXR_STATION_LABEL=NABEL

################################################################################
# Directories
################################################################################

################################################################################
# Directories (only those that differ from base)
################################################################################

# Input preparation directories
CXR_EMISSION_SOURCE_DIR=/afs/psi.ch/intranet/LAC/oderbolz/emiss/emisscamx


################################################################################
# CAMxRunner specific settings
################################################################################


################################################################################
# If you want to disable modules of the CAMxRunner, do it here
################################################################################

# This string contains the space-separated module names of
# unwanted daily preprocessors like "create_emissions"
# If "${CXR_SKIP_ALL}" is given, all daily preprocessors are skipped

CXR_DISABLED_DAILY_PREPROC=""

# This string contains the space-separated  module names of
# unwanted one-time preprocessors.
# If "${CXR_SKIP_ALL}" is given, all one-time preprocessors are skipped

CXR_DISABLED_ONCE_PREPROC=""

# This string contains the space-separated module names of
# unwanted daily postprocessors
# If "${CXR_SKIP_ALL}" is given, all daily postprocessors are skipped
	
CXR_DISABLED_DAILY_POSTPROC="avgdif"

# This string contains the space-separated module names of
# unwanted one-time postprocessors.
# If "${CXR_SKIP_ALL}" is given, all one-time postprocessors are skipped

export  CXR_DISABLED_ONCE_POSTPROC=""

################################################################################
# Preprocessors
################################################################################	

################################################################################
# Postprocessors
################################################################################	

################################################################################
# CAMxRunner Internal stuff
################################################################################

# Accepted error threshold before stop. (-1 turns off this check)
CXR_ERROR_THRESHOLD=50

################################################################################
# Rules for filenames (See http://people.web.psi.ch/oderbolz/CAMxRunner#FileRules)
#
# There are more filerules in the Probing sections of this file
#
# These ABSOLUTELY need 'single quotes' around them, otherwise the shell expands them here!
################################################################################

################## Grid independent ############################################

# Input Preparation ############################################################


# Input ########################################################################

CXR_PHOTOLYSIS_RATES_FILE_RULE='${CXR_INPUT_DIR}/tuv_${CXR_CAMX_CUSTOMER}_${CXR_YEAR_S}_${CXR_WOY}.out'
CXR_INITIAL_CONDITIONS_FILE_RULE='${CXR_INPUT_DIR}/ic_${CXR_CAMX_CUSTOMER}_moz.bin'
CXR_BOUNDARY_CONDITIONS_FILE_RULE='${CXR_INPUT_DIR}/bc_${CXR_CAMX_CUSTOMER}_moz_${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}.bin'
CXR_TOP_CONCENTRATIONS_FILE_RULE='${CXR_INPUT_DIR}/topconc_${CXR_CAMX_CUSTOMER}${CXR_YEAR_S}.${CXR_ASC_EXT}'
CXR_ALBEDO_HAZE_OZONE_FILE_RULE='${CXR_INPUT_DIR}/ahomap_${CXR_CAMX_CUSTOMER}_3grids_${CXR_YEAR_S}_${CXR_WOY}.out'

CXR_POINT_SOURCES_FILE_RULE=''

# These are needed as input (last day)
CXR_MASTER_GRID_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW_YESTERDAY}.inst'
CXR_NESTED_GRID_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW_YESTERDAY}.finst'
# These are needed as output (this day)
CXR_MASTER_GRID_RESTART_OUT_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW}.inst'
CXR_NESTED_GRID_RESTARTT_OUT_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW}.finst'

# More restart rules in the probing sections later

CXR_PIG_RESTART_FILE_RULE=''

CXR_ROOT_OUTPUT_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW}'

# File Roots for probing
CXR_PA_ROOT_OUTPUT_FILE_RULE='$CXR_PA_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'

CXR_DDM_ROOT_OUTPUT_FILE_RULE='$CXR_DDM_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'
CXR_RT_ROOT_OUTPUT_FILE_RULE='$CXR_RT_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'
CXR_SA_ROOT_OUTPUT_FILE_RULE='$CXR_SA_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'

# These are used 
#	* to prevent overwriting of existing files 
#	* the creation of the aqmfad directory
#	* to convert the binary output files

CXR_DIAG_FILE_RULE='${CXR_ROOT_OUTPUT}.diag'
CXR_FINST_FILE_RULE='${CXR_ROOT_OUTPUT}.finst'
CXR_INST_FILE_RULE='${CXR_ROOT_OUTPUT}.inst'
CXR_MASS_FILE_RULE='${CXR_ROOT_OUTPUT}.mass'
CXR_OUT_FILE_RULE='${CXR_ROOT_OUTPUT}.out'

################## NABEL (Station dependent)#####################################

# The local variable $station will be replaced by the actual name of the station in question
CXR_STATION_FILE_RULE='${CXR_STATION_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}_${station}.dat'
CXR_METEO_STATION_FILE_RULE='${CXR_STATION_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}_${station}_meteo.dat'


# This is the name of the cumulated file
CXR_CUMULATIVE_STATION_FILE_RULE='${CXR_STATION_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}_${station}-complete.dat'

################## Grid spcecific ##############################################

# These NEED the variable ${CXR_IGRID} somewhere (the grid number)

# Input Preparation ############################################################

# Emission (classical)
CXR_EMISSION_ASC_FILE_RULE='${CXR_EMISSION_SOURCE_DIR}/${CXR_DATE_RAW}/${CXR_EMMISS_SCENARIO}/camx_emiss_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_EMMISS_SCENARIO}_${CXR_DATE_RAW}.asc'

# Input ########################################################################

#Landuse
CXR_LANDUSE_FILE_RULE='${CXR_INPUT_DIR}/terrain_domain${CXR_IGRID}_${CXR_MET_PROJECT}_lucamx.bin'

# Pressure
CXR_PRESSURE_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_zp_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Wind
CXR_WIND_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_uv_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Temperature
CXR_TEMPERATURE_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_tp_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Vapor
CXR_VAPOR_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_qa_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Cloud
CXR_CLOUD_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_cr_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Vertical K
CXR_K_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_kv_CMAQ_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'
 
# Emissions
CXR_EMISSION_FILE_RULE='${CXR_EMISSION_DIR}/camx_emiss_domain${CXR_IGRID}_${CXR_EMMISS_PROJECT}_${CXR_EMMISS_SCENARIO}_${CXR_DATE_RAW}.bin'


# Output #######################################################################

#Deposition file
CXR_DEPN_FILE_RULE='${CXR_ROOT_OUTPUT}.depn.grd0${CXR_IGRID}'

CXR_AVG_FILE_RULE='${CXR_ROOT_OUTPUT}.avrg.grd0${CXR_IGRID}'

# We create the ASCII version of thefiles in the aqmfad directory
# All rules start with the CXR_ASCII_OUTPUT_DIR and end with ${CXR_ASC_EXT}
CXR_AVG_ASC_FILE_RULE='${CXR_ASCII_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW}.avrg.grd0${CXR_IGRID}.${CXR_ASC_EXT}'

# Landuse ASCII File is provided by MM5, we will convert it to binary
CXR_LANDUSE_ASC_FILE_RULE='${CXR_LANDUSE_DIR}/terrain_domain${CXR_IGRID}_${CXR_MET_PROJECT}_lucamx.asce'

# Terrain elevation for aqmfad
CXR_TERRAIN_ASC_FILE_RULE='${CXR_LANDUSE_DIR}/terrain_domain${CXR_IGRID}_${CXR_MET_PROJECT}_terrcamx.asce'

CXR_PRESSURE_ASC_FILE_RULE='${CXR_ASCII_OUTPUT_DIR}/camx_zp_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_WIND_ASC_FILE_RULE='${CXR_ASCII_OUTPUT_DIR}/camx_uv_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_TEMPERATURE_ASC_FILE_RULE='${CXR_ASCII_OUTPUT_DIR}/camx_tp_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_VAPOR_ASC_FILE_RULE='${CXR_ASCII_OUTPUT_DIR}/camx_qa_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_CLOUD_ASC_FILE_RULE='${CXR_ASCII_OUTPUT_DIR}/camx_cr_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_K_ASC_FILE_RULE='${CXR_ASCII_OUTPUT_DIR}/camx_kv_CMAQ_domain${CXR_IGRID}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'		

# Aqmfad options
# This is treated like an array
# CXR_RUN_AQMFAD_ON_GRID="1 2 3"

CXR_RUN_AQMFAD_ON_GRID="3"

################################################################################
# Grid definition
################################################################################

################################################################################
# Model options (Solver etc.)
################################################################################
CXR_DIAGNOSTIC_ERROR_CHECK=false    # True=will stop before 1st timestep
CXR_ADVECTION_SOLVER=PPM      # (PPM,BOTT)
CXR_CHEMISTRY_SOLVER=CMC      # (CMC,IEH,LSODE)

CXR_PROBING_TOOL=None     # (None,OSAT,PSAT,GOAT,APCA,DDM,PA,RTRAC)
CXR_CHEMISTRY=true
CXR_DRY_DEPOSITION=true
CXR_WET_DEPOSITION=true
CXR_STAGGERED_WINDS=true
CXR_GRIDDED_EMISSIONS=true
CXR_POINT_EMISSIONS=false
CXR_IGNORE_EMISSION_DATES=true

# Generate PIG relevant code
CXR_PLUME_IN_GRID=false
CXR_PIG_SUBMODEL=None     # (None,GREASD,IRON)


################################################################################
################################################################################
# Changes below this Comment are rather unusual
################################################################################
################################################################################

################################################################################
# Chemical species
################################################################################

# First unset array
unset CXR_OUTPUT_SPECIES_NAMES

# Entry 0 is a dummy, we want our arrays to start with index 1
CXR_OUTPUT_SPECIES_NAMES[0]=-
CXR_OUTPUT_SPECIES_NAMES[1]=NO
CXR_OUTPUT_SPECIES_NAMES[2]=NO2
CXR_OUTPUT_SPECIES_NAMES[3]=O3
CXR_OUTPUT_SPECIES_NAMES[4]=TOL
CXR_OUTPUT_SPECIES_NAMES[5]=XYL
CXR_OUTPUT_SPECIES_NAMES[6]=FORM
CXR_OUTPUT_SPECIES_NAMES[7]=PAN
CXR_OUTPUT_SPECIES_NAMES[8]=CO
CXR_OUTPUT_SPECIES_NAMES[9]=HONO
CXR_OUTPUT_SPECIES_NAMES[10]=HNO3
CXR_OUTPUT_SPECIES_NAMES[11]=H2O2
CXR_OUTPUT_SPECIES_NAMES[12]=ISOP
CXR_OUTPUT_SPECIES_NAMES[13]=PNA
CXR_OUTPUT_SPECIES_NAMES[14]=SO2
CXR_OUTPUT_SPECIES_NAMES[15]=NH3
CXR_OUTPUT_SPECIES_NAMES[16]=PH2O
CXR_OUTPUT_SPECIES_NAMES[17]=PNO3
CXR_OUTPUT_SPECIES_NAMES[18]=PSO4
CXR_OUTPUT_SPECIES_NAMES[19]=PNH4
CXR_OUTPUT_SPECIES_NAMES[20]=POA
CXR_OUTPUT_SPECIES_NAMES[21]=PEC
CXR_OUTPUT_SPECIES_NAMES[22]=SOA1
CXR_OUTPUT_SPECIES_NAMES[23]=SOA2
CXR_OUTPUT_SPECIES_NAMES[24]=SOA3
CXR_OUTPUT_SPECIES_NAMES[25]=SOA4
CXR_OUTPUT_SPECIES_NAMES[26]=SOA5
CXR_OUTPUT_SPECIES_NAMES[27]=SOA6
CXR_OUTPUT_SPECIES_NAMES[28]=SOA7

# Automatically count # species (subtract 1 for dummy)
CXR_NUMBER_OF_OUTPUT_SPECIES=$(( ${#CXR_OUTPUT_SPECIES_NAMES[@]} - 1 ))

################################################################################
# Options for extraction of NABEL station data taken from site.conf
################################################################################

################################################################################
# The OPM and EXEC Settings are machine-dependent.
################################################################################ 
# Are we on a multicore system?
CXR_NUMBER_OF_CORES=$(main.countCores)

# Maximal number of parallel processes in the CAMxRunner
if [[ "$CXR_PARALLEL_PROCESSING" == true  ]]
then
	# By default, use the number of cores
	CXR_MAX_PARALLEL_PROCS=$CXR_NUMBER_OF_CORES
else
	# Non-Parallel use 1 process
	CXR_MAX_PARALLEL_PROCS=1
fi

# This can be either None, OMP or MPI (MPI is not currently implemented). OMP is recommended.
# the CAMx executable mifust provide this!
CXR_PARALLEL_PARADIGM=OMP

################################################################################
# OpenMP settings
################################################################################
# Switch on OMP
# If OMP_NUM_THREADS=1, OMP is turned off

# Set number of OpenMP threads 
export OMP_NUM_THREADS=$(( $CXR_NUMBER_OF_CORES / 2 ))

# Per Thread stack size. Can lead to problems if both to large or too small...
export MPSTKZ=128M

################################################################################
# Determine name of executable.
################################################################################

# If you need another executable name,
# set this value to a full path.
#CXR_MODEL_EXEC=/path/to/my/exec

# Somehow, on this machine we get totally wrong memory numbers
CXR_CHECK_MEMORY_USAGE=false