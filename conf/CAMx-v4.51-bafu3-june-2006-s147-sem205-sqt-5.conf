#!/usr/bin/env bash
#
# Maintenance note: MUST BE KEPT UP TO DATE WITH installer/X.YZ/base.ask and templates/base.tpl
#
# Runner script for CAMx 4.42/4.51 - Configuration. 
# See http://people.web.psi.ch/oderbolz/CAMxRunner
# 
# Leave the next line intact, it is used for change detection
# Version: $Id$ 
#
# Written by Daniel C. Oderbolz (CAMxRunner@psi.ch),
# Released under the Creative Commons "Attribution-Share Alike 2.5 Switzerland"
# License, (http://creativecommons.org/licenses/by-sa/2.5/ch/deed.en)
################################################################################
# Who	When		What
# dco 	02.05.2008	Created
################################################################################
# TODO: 
################################################################################
#
# All Variables (except system variables like OMP*) names start with CXR_
#
# Output File names end with OUTPUT_FILE
# Input File names end with INPUT_FILE
# Directories with _DIR
# Output directories with OUTPUT_DIR
# Executables with _EXEC
#
# Arrays of files are called OUTPUT_ARR_FILES AND INPUT_ARR_FILES
#
# If a variable is called CXR_SOMETHING_RULE
# it is expanded automatically to yield CXR_SOMETHING.
#
# Really red the documentation on Rules (http://people.web.psi.ch/oderbolz/CAMxRunner#FileRules) 
# before using them.
#
# Strings which are used as Floating point numbers, but are integer, need a trailing .
#
# Arrays must have an index 0 with a Dummy entry, we work in Fortran Land here.
#
# Also, entries in arrays which contain spaces must be protected by
# single (') quotes, because arrays are exported as space separated list

################################################################################
# Model Version (CXR_MODEL_VERSION) and name (CXR_MODEL) is set automatically by the link name!!
################################################################################

################################################################################
# Notification options
################################################################################

CXR_LOG_LEVEL_SCREEN=$CXR_LOG_LEVEL_INF 

CXR_MAILADDR=CAMxRunner@psi.ch
CXR_SMSNR=0765888275
CXR_SMSPROVIDER=sms.switch.ch
CXR_SMSADDR=${CXR_SMSNR}@${CXR_SMSPROVIDER}

#If this Variable is true, SMS will be sent
CXR_SEND_SMS=false

# This string can be formatted as needed.
# I use it to create a row for a table in our Wiki.
# It will be output at the end of the log (expanded)
#
# Make sure, control sequences like \n are double-escaped (\\n)
# because the expansion otherwise removes the sequence

CXR_FINISH_MESSAGE_RULE='Please copy this into https://wiki.intranet.psi.ch/twiki/LAC/CAMxRuns \\n \| $(date +"%Y/%m/%d") \| ${USER} \| ${CXR_STATUS} \| ${CXR_RUN} \| ${CXR_START_DATE} \| ${CXR_STOP_DATE} \| ${CXR_BASE_DIR} \| http://people.web.psi.ch/oderbolz/CAMx/conf/$(basename "$CXR_CONFIG") \| http://people.web.psi.ch/oderbolz/CAMx/log/$(basename "$CXR_LOG") \| \\n'


################################################################################
# Timespan of simulation
################################################################################

# The Start of the simulation in YYYY-MM-DD notation
CXR_START_DATE=2006-06-01

# The Stop of the simulation in YYYY-MM-DD notation
CXR_STOP_DATE=2006-06-07

# Must be in HHMI Format, applies just to first and last day, all others are from 0000 to 2400
CXR_START_HOUR_FIRST_DAY=0000
CXR_STOP_HOUR_LAST_DAY=2400

# Timezone (0=UTC,5=EST,6=CST,7=MST,8=PST)
CXR_TIME_ZONE=0

# The Simulation intervals in Minutes (Floats!)
CXR_MAXIMUM_TIMESTEP=15.
CXR_MET_INPUT_FREQUENCY=60.
CXR_EMS_INPUT_FREQUENCY=60.
CXR_OUTPUT_FREQUENCY=60.


################################################################################
# Chemical and aerosol Mechanism
################################################################################

# Here choose between these possibilities (taken from the CAMx Guide)
# 3 (Carbon Bond IV - Gery et al. 1989)
# 1 (same as above, but with reactive chlorine chemistry - Tanaka et al., 2000)
# 4 (Carbon Bond IV - CB4)
# 5 (SAPRC99, Carter, 2000)
# 6 (Carbon Bond version 2005 - CB05) - Default for CAMx 4.51
# 10 (User defined)

CXR_CHEMICAL_MECHANISM=6

# Choose between 
# CF for (Coarse fine) 
# CF+hg (Coarse fine with mercury)
# CMU (Carnegie Mellon sectional model) 
# NONE (No Aerosols)
# Aerosol Chemistry is currently only supported with mechanisms 4 and 6 - CAMxRunner will complain but try anyway
CXR_AEROSOL_MECHANISM=CF

# The CAMxRunner determines the name of the chemparam file automatically
# but you can overwrite this behavior by setting this parameter
# In this case it uses your setting
# CXR_CHEMPARAM_INPUT_FILE=


################################################################################
# Labels
################################################################################
CXR_MET_PROJECT=uw3
CXR_MET_SCENARIO=s147

CXR_EMMISS_PROJECT=${CXR_MET_PROJECT}
CXR_EMMISS_SCENARIO=sem205

CXR_CAMX_SCENARIO=${CXR_MET_SCENARIO}
CXR_CAMX_CUSTOMER=bafu3

CXR_STATION_LABEL=NABEL

################################################################################
# Directories 
# Attention: Put no variables in directory names that are not yet set here!
# E. g. any variable containing dates (like simulation year) will fail to expand!
################################################################################

CXR_BASE_DIR= /afs/psi.ch/intranet/LAC/oderbolz/CAMxRuns/Runs/${CXR_RUN}
CXR_INPUT_DIR=${CXR_BASE_DIR}/Inputs
CXR_METEO_DIR= /afs/psi.ch/intranet/LAC/jkeller/linuxmm5/out

CXR_LANDUSE_DIR= /afs/psi.ch/intranet/LAC/jkeller/linuxmm5/out/const

CXR_EMISSION_DIR=${CXR_BASE_DIR}/Emiss
CXR_PTSRCE_DIR=${CXR_BASE_DIR}/Ptsrce

# Input preparation directories
CXR_EMISSION_SOURCE_DIR= /afs/psi.ch/intranet/LAC/oderbolz/emiss/emisscamx


# This is the main output directory
CXR_OUTPUT_DIR=${CXR_BASE_DIR}/Outputs

# Probing output dirs
CXR_PA_OUTPUT_DIR=${CXR_OUTPUT_DIR}/PA
CXR_DDM_OUTPUT_DIR=${CXR_OUTPUT_DIR}/DDM
CXR_RT_OUTPUT_DIR=${CXR_OUTPUT_DIR}/RT
CXR_SA_OUTPUT_DIR=${CXR_OUTPUT_DIR}/SA

CXR_AQMFAD_OUTPUT_DIR=${CXR_OUTPUT_DIR}/aqmfad
CXR_STATION_OUTPUT_DIR=${CXR_OUTPUT_DIR}/Nabel

################################################################################
# CAMxRunner specific settings
################################################################################

################################################################################
# If you want to disable modules of the CAMxRunner, do it here
################################################################################

# Set this to false to disable CAMx in this run
CXR_RUN_MODEL=true

# This string contains the space-separated  module names of
# unwanted one-time preprocessors.
# If "skip_all" is given, all one-time preprocessors are skipped

CXR_DISABLED_ONCE_PREPROC="skip_all"

# This string contains the space-separated module names of
# unwanted daily preprocessors like "create_emissions"
# If "skip_all" is given, all daily preprocessors are skipped

CXR_DISABLED_DAILY_PREPROC="boundary_conditions"

# This string contains the space-separated module names of
# unwanted daily postprocessors like "prepare_output_dir convert_output"
# If "skip_all" is given, all daily postprocessors are skipped
	
CXR_DISABLED_DAILY_POSTPROC="avgdif"

# This string contains the space-separated module names of
# unwanted one-time postprocessors.
# If "skip_all" is given, all one-time postprocessors are skipped

export  CXR_DISABLED_ONCE_POSTPROC=""

################################################################################
# Preprocessors
################################################################################	

########################################
# albedo_haze_ozone (AHOMAP)
########################################

# Rules to generate the URL to get the ozone column (works starting 2004)
CXR_AHOMAP_OZONE_COLUMN_FILE_RULE='L3_ozone_omi_${CXR_DATE_RAW}.txt'
# Nesting of rule - attention with the quoting
CXR_AHOMAP_OZONE_COLUMN_URL_RULE='ftp://toms.gsfc.nasa.gov/pub/omi/data/ozone/Y${CXR_YEAR}/'${CXR_AHOMAP_OZONE_COLUMN_FILE_RULE}

# This is where the files go
CXR_AHOMAP_OZONE_COLUMN_DIR=${CXR_PREPROCESSOR_ONCE_INPUT_DIR}/albedo_haze_ozone/ozone_column

# Should AHOMAP consider snow (boolean)
CXR_AHOMAP_SNOW=false

########################################
# photolysis_rates (TUV)
########################################

# Choose between these 2:
# 1 : pseudo-spherical two-stream delta-Eddington (ps2str.f) - fast
# 2 : discrete ordinates method (slower but more accurate)
CXR_TUV_RADIATIVE_TRANSFER_SCHEME=2

# This is a list of reaction numbers that need Photolysis rates 
# This depends on the chemistry parameters file!

# Take this for CBM05
CXR_TUV_REACTION_NUMBERS="100, 122, 121, 102, 101, 125, 89, 126, 127, 128, 129, 86, 91, 90, 85, 130, 84, 131, 70"

# take this for CB4 with updated isoprene chemistry (CAMx mechanisms 1, 3 and 4)
#CXR_TUV_REACTION_NUMBERS="4, 15, 16, 2, 17, 56"

CXR_TUV_NO_OF_REACTIONS=$(main.countDelimitedElements "$CXR_TUV_REACTION_NUMBERS" ",")

# This is stuff that we need to configure the CAMx compilation (camx.prm) and
# TUV operation. (TUV layer definition to calculate look-up table)
CXR_NOZN=5
CXR_NALB=5
CXR_NHAZ=3
CXR_NRUF=9
CXR_NHGHT=11
CXR_NZEN=10
CXR_NLU=11

# Now we need to indicate a height above ground for each of the CXR_NHGHT levels
CXR_TUV_HEIGHTS="0. 0.15 0.35 0.60 1.00 2.00 3.00 4.00 6.00 8.00 10.0"

########################################
# topconc
########################################

# This is the IDL procedure for the topconc generation
CXR_TOPCONC_PROC_INPUT_FILE=${CXR_PREPROCESSOR_ONCE_INPUT_DIR}/topconc/topconc.pro

########################################
# initial_conditions
########################################

# This is the IDL procedure for the initial_conditions generation
CXR_IC_PROC_INPUT_FILE=${CXR_PREPROCESSOR_ONCE_INPUT_DIR}/initial_conditions/camxinit.pro

########################################
# boundary_conditions
########################################

# This is the IDL procedure for the boundary_conditions generation
CXR_BC_PROC_INPUT_FILE=${CXR_PREPROCESSOR_DAILY_INPUT_DIR}/boundary_conditions/camxbound.pro

################################################################################
# Postprocessors
################################################################################



########################################
# extract_station_data
########################################	

# This is the IDL procedure for the extraction
# Because it is not executable, we treat it as an input file
CXR_STATION_PROC_INPUT_FILE=${CXR_POSTPROCESSOR_DAILY_INPUT_DIR}/extract_station_data/extract_nabel_stations.pro

# Do we run processing parallel?
# Means that modules marked as parallel will also run parallel.
# Modules not marked parallel will never be ren parallel.
CXR_PARALLEL_PROCESSING=false

# Maximal number of parallel processes set later


################################################################################
# Rules for filenames (See http://people.web.psi.ch/oderbolz/CAMxRunner#FileRules)
#
# There are more filerules in the Probing sections of this file
#
# These ABSOLUTELY need 'single quotes' around them, otherwise the shell expands them here!
################################################################################

################## Grid independent ############################################

# Input Preparation ############################################################


# Input ########################################################################

# The meteo files might have a different name on startup
CXR_DAY_METEO_FIRST_DAY_RULE='${CXR_DAY}_s'

CXR_PHOTOLYIS_RATES_FILE_RULE='${CXR_INPUT_DIR}/tuv_${CXR_CAMX_CUSTOMER}_summer${CXR_YEAR_S}.out'
CXR_INITIAL_CONDITIONS_FILE_RULE='${CXR_INPUT_DIR}/ic_bafu3_moz_01062006.bin'
CXR_BOUNDARY_CONDITIONS_FILE_RULE='${CXR_INPUT_DIR}/bc_mozO3_${CXR_CAMX_CUSTOMER}_${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}.bin'
CXR_TOP_CONCENTRATIONS_FILE_RULE='${CXR_INPUT_DIR}/topconc_${CXR_CAMX_CUSTOMER}_summer${CXR_YEAR_S}.${CXR_ASC_EXT}'
CXR_ALBEDO_HAZE_OZONE_FILE_RULE='${CXR_INPUT_DIR}/ahomap_${CXR_CAMX_CUSTOMER}_3grids_summer${CXR_YEAR_S}.out'

CXR_POINT_SOURCES_FILE_RULE=''

CXR_MASTER_GRID_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW_YESTERDAY}.inst'
CXR_NESTED_GRID_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW_YESTERDAY}.finst'

# More restart rules in the probing sections later

CXR_PIG_RESTART_FILE_RULE=''

CXR_ROOT_OUTPUT_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW}'

# File Roots for probing
CXR_PA_ROOT_OUTPUT_FILE_RULE='$CXR_PA_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'

CXR_DDM_ROOT_OUTPUT_FILE_RULE='$CXR_DDM_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'
CXR_RT_ROOT_OUTPUT_FILE_RULE='$CXR_RT_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'
CXR_SA_ROOT_OUTPUT_FILE_RULE='$CXR_SA_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}'

# These are used 
#	* to prevent overwriting of existing files 
#	* the creation of the aqmfad directory
#	* to convert the binary output files
#	These are dependent on another rule - check the quoting!
CXR_DIAG_FILE_RULE=${CXR_ROOT_OUTPUT_FILE_RULE}'.diag'
CXR_FINST_FILE_RULE=${CXR_ROOT_OUTPUT_FILE_RULE}'.finst'
CXR_INST_FILE_RULE=${CXR_ROOT_OUTPUT_FILE_RULE}'.inst'
CXR_MASS_FILE_RULE=${CXR_ROOT_OUTPUT_FILE_RULE}'.mass'
CXR_OUT_FILE_RULE=${CXR_ROOT_OUTPUT_FILE_RULE}'.out'

################## NABEL (Station dependent)#####################################

# The local variable $station will be replaced by the actual name of the station in question
CXR_STATION_FILE_RULE='${CXR_STATION_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_DAY}_${station}.dat'

# This is the name of the cumulated file
CXR_CUMULATIVE_STATION_FILE_RULE='${CXR_STATION_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}_${station}-complete.dat'

################## Grid spcecific ##############################################

# These NEED the variable ${i} somewhere (the grid number)

# Input Preparation ############################################################

# Emission (classical)
CXR_EMISSION_ASC_FILE_RULE='${CXR_EMISSION_SOURCE_DIR}/${CXR_DATE_RAW}/${CXR_EMMISS_SCENARIO}/camx_emiss_domain${i}_${CXR_MET_PROJECT}_${CXR_EMMISS_SCENARIO}_${CXR_DATE_RAW}.asc'

# Input ########################################################################

#Landuse
CXR_LANDUSE_FILE_RULE='${CXR_INPUT_DIR}/terrain_domain${i}_${CXR_MET_PROJECT}_lucamx.bin'

# Pressure
CXR_PRESSURE_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_zp_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Wind
CXR_WIND_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_uv_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Temperature
CXR_TEMPERATURE_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_tp_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Vapor
CXR_VAPOR_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_qa_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Cloud
CXR_CLOUD_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_cr_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'

# Vertical K
CXR_K_FILE_RULE='${CXR_METEO_DIR}/${CXR_DATE_RAW}/${CXR_MET_SCENARIO}/camx_kv_CMAQ_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}'
 
# Emissions
CXR_EMISSION_FILE_RULE='${CXR_EMISSION_DIR}/camx_emiss_domain${i}_${CXR_EMMISS_PROJECT}_${CXR_EMMISS_SCENARIO}_${CXR_DATE_RAW}.bin'


# Output #######################################################################

#Deposition file (dependency -> quoting!)
CXR_DEPN_FILE_RULE=${CXR_ROOT_OUTPUT_FILE_RULE}'.depn.grd0${i}'

# The actual average file (THE OUTPUT) (dependency -> quoting!)
CXR_AVG_FILE_RULE=${CXR_ROOT_OUTPUT_FILE_RULE}'.avrg.grd0${i}'  

# We create the ASCII version of thefiles in the aqmfad directory      
# All rules start with the CXR_AQMFAD_OUTPUT_DIR and end with ${CXR_ASC_EXT}
CXR_AVG_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/${CXR_RUN}.${CXR_DATE_RAW}.avrg.grd0${i}.${CXR_ASC_EXT}'

# Landuse ASCII File is provided by MM5, we will convert it to binary
CXR_LANDUSE_ASC_FILE_RULE='${CXR_LANDUSE_DIR}/terrain_domain${i}_${CXR_MET_PROJECT}_lucamx.asce'

# Terrain elevation for aqmfad
CXR_TERRAIN_ASC_FILE_RULE='${CXR_LANDUSE_DIR}/terrain_domain${i}_${CXR_MET_PROJECT}_terrcamx.asce'

CXR_PRESSURE_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_zp_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_WIND_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_uv_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_TEMPERATURE_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_tp_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_VAPOR_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_qa_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_CLOUD_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_cr_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'
CXR_K_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_kv_CMAQ_domain${i}_${CXR_MET_PROJECT}_${CXR_MET_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}-${CXR_DAY_METEO}.${CXR_ASC_EXT}'		


# Aqmfad options
# This is treated like an array
#CXR_RUN_AQMFAD_ON_GRID="1 2 3"
CXR_RUN_AQMFAD_ON_GRID="3"

# the same for emifad
CXR_RUN_EMIFAD_ON_GRID="1 3"

################################################################################
# Geometry of simulation
################################################################################

CXR_MAP_PROJECTION=LAMBERT # (LAMBERT,POLAR,UTM,LATLON)

########################################
# Floats
########################################

# Needed for LAMBERT only
CXR_LAMBERT_CENTER_LONGITUDE=3.5   # deg (west<0south<0)
CXR_LAMBERT_CENTER_LATITUDE=47.    # deg (west<0south<0)
CXR_LAMBERT_TRUE_LATITUDE1=46.     # deg (west<0south<0)
CXR_LAMBERT_TRUE_LATITUDE2=48.     # deg (west<0south<0)

# Needed for UTM only
CXR_UTM_ZONE=0

# Needed for POLAR only
CXR_POLAR_LONGITUDE_POLE=0.        # deg (west<0south<0)
CXR_POLAR_LATITUDE_POLE=0.         # deg (west<0south<0)

	
################################################################################
# Grid definition
################################################################################

# How many grids are used?
CXR_NUMBER_OF_GRIDS=3

# Of course, more grids mean more settings down here

#Master grid (Floats)
CXR_MASTER_ORIGIN_XCOORD=-1282.5       # km or deg SW corner of cell(11)
CXR_MASTER_ORIGIN_YCOORD=-1066.5       # km or deg SW corner of cell (11)

# Floats
CXR_MASTER_CELL_XSIZE=27.               # km or deg
CXR_MASTER_CELL_YSIZE=27.               # km or deg


CXR_MASTER_GRID_COLUMNS=95
CXR_MASTER_GRID_ROWS=79

CXR_NUMBER_OF_LAYERS[1]=14

# Grid 0 and 1 are dummies (except CXR_NUMBER_OF_LAYERS[1])
CXR_NEST_MESHING_FACTOR[0]=-
CXR_NEST_BEG_I_INDEX[0]=-
CXR_NEST_END_I_INDEX[0]=-
CXR_NEST_BEG_J_INDEX[0]=-
CXR_NEST_END_J_INDEX[0]=-
CXR_NUMBER_OF_LAYERS[0]=-

# This is a dummy because entries 1 are given by the MASTER settings
CXR_NEST_MESHING_FACTOR[1]=-
CXR_NEST_BEG_I_INDEX[1]=-
CXR_NEST_END_I_INDEX[1]=-
CXR_NEST_BEG_J_INDEX[1]=-
CXR_NEST_END_J_INDEX[1]=-

# Number of layers set above

# Second grid
CXR_NEST_MESHING_FACTOR[2]=3        # Relative to master grid
CXR_NEST_BEG_I_INDEX[2]=51          # Relative to master grid
CXR_NEST_END_I_INDEX[2]=74          # Relative to master grid
CXR_NEST_BEG_J_INDEX[2]=32          # Relative to master grid
CXR_NEST_END_J_INDEX[2]=49          # Relative to master grid
CXR_NUMBER_OF_LAYERS[2]=14
	
# Third grid
CXR_NEST_MESHING_FACTOR[3]=9        # Relative to master grid
CXR_NEST_BEG_I_INDEX[3]=55          # Relative to master grid
CXR_NEST_END_I_INDEX[3]=68          # Relative to master grid
CXR_NEST_BEG_J_INDEX[3]=35          # Relative to master grid
CXR_NEST_END_J_INDEX[3]=44          # Relative to master grid
CXR_NUMBER_OF_LAYERS[3]=14

################################################################################
# Model options (Solver etc.)
################################################################################
CXR_DIAGNOSTIC_ERROR_CHECK=false    # True=will stop before 1st timestep
CXR_ADVECTION_SOLVER=PPM      # (PPM,BOTT)
CXR_CHEMISTRY_SOLVER=CMC      # (CMC,IEH,LSODE)

CXR_PROBING_TOOL=None     # (None,OSAT,PSAT,GOAT,APCA,DDM,PA,RTRAC)
CXR_CHEMISTRY=true
CXR_DRY_DEPOSITION=true
CXR_WET_DEPOSITION=true
CXR_STAGGERED_WINDS=true
CXR_GRIDDED_EMISSIONS=true
CXR_POINT_EMISSIONS=false
CXR_IGNORE_EMISSION_DATES=true

# Generate PIG relevant code
CXR_PLUME_IN_GRID=false
CXR_PIG_SUBMODEL=None     # (None,GREASD,IRON)


################################################################################
################################################################################
# Changes below this Comment are rather unusual
################################################################################
################################################################################

################################################################################
# Emission settings 
################################################################################


################################################################################
# Output specifications
################################################################################

CXR_AVERAGE_OUTPUT_3D=true
CXR_HDF_FORMAT_OUTPUT=false

################################################################################
# Chemical species
################################################################################

# First unset array
unset CXR_OUTPUT_SPECIES_NAMES

# Selection of output species
case "${CXR_AEROSOL_MECHANISM}" in

	CF)

		case "${CXR_CHEMICAL_MECHANISM}" in
		
			4)
				# CF-CBIV (as used before, extended by inert aerosol species at the end)
				# Entry 0 is a dummy, we want our arrays to start with index 1
				CXR_OUTPUT_SPECIES_NAMES[0]=-
				CXR_OUTPUT_SPECIES_NAMES[1]=NO
				CXR_OUTPUT_SPECIES_NAMES[2]=NO2
				CXR_OUTPUT_SPECIES_NAMES[3]=O3
				CXR_OUTPUT_SPECIES_NAMES[4]=TOL
				CXR_OUTPUT_SPECIES_NAMES[5]=XYL
				CXR_OUTPUT_SPECIES_NAMES[6]=FORM
				CXR_OUTPUT_SPECIES_NAMES[7]=PAN
				CXR_OUTPUT_SPECIES_NAMES[8]=CO
				CXR_OUTPUT_SPECIES_NAMES[9]=HONO
				CXR_OUTPUT_SPECIES_NAMES[10]=HNO3
				CXR_OUTPUT_SPECIES_NAMES[11]=H2O2
				CXR_OUTPUT_SPECIES_NAMES[12]=ISOP
				CXR_OUTPUT_SPECIES_NAMES[13]=PNA
				CXR_OUTPUT_SPECIES_NAMES[14]=SO2
				CXR_OUTPUT_SPECIES_NAMES[15]=NH3
				CXR_OUTPUT_SPECIES_NAMES[16]=PH2O
				CXR_OUTPUT_SPECIES_NAMES[17]=PNO3
				CXR_OUTPUT_SPECIES_NAMES[18]=PSO4
				CXR_OUTPUT_SPECIES_NAMES[19]=PNH4
				CXR_OUTPUT_SPECIES_NAMES[20]=POA
				CXR_OUTPUT_SPECIES_NAMES[21]=PEC
				CXR_OUTPUT_SPECIES_NAMES[22]=SOA1
				CXR_OUTPUT_SPECIES_NAMES[23]=SOA2
				CXR_OUTPUT_SPECIES_NAMES[24]=SOA3
				CXR_OUTPUT_SPECIES_NAMES[25]=SOA4
				CXR_OUTPUT_SPECIES_NAMES[26]=SOA5
				CXR_OUTPUT_SPECIES_NAMES[27]=NA
				CXR_OUTPUT_SPECIES_NAMES[28]=PCL
				CXR_OUTPUT_SPECIES_NAMES[29]=FPRM
				CXR_OUTPUT_SPECIES_NAMES[30]=FCRS
				CXR_OUTPUT_SPECIES_NAMES[31]=CPRM
				CXR_OUTPUT_SPECIES_NAMES[32]=CCRS
				;;
		
			6)
				# CF-CB05
				# Entry 0 is a dummy, we want our arrays to start with index 1
				CXR_OUTPUT_SPECIES_NAMES[0]=-
				CXR_OUTPUT_SPECIES_NAMES[1]=NO
				CXR_OUTPUT_SPECIES_NAMES[2]=NO2
				CXR_OUTPUT_SPECIES_NAMES[3]=O3
				CXR_OUTPUT_SPECIES_NAMES[4]=TOL
				CXR_OUTPUT_SPECIES_NAMES[5]=XYL
				CXR_OUTPUT_SPECIES_NAMES[6]=FORM
				CXR_OUTPUT_SPECIES_NAMES[7]=PAN
				CXR_OUTPUT_SPECIES_NAMES[8]=CO
				CXR_OUTPUT_SPECIES_NAMES[9]=HONO
				CXR_OUTPUT_SPECIES_NAMES[10]=HNO3
				CXR_OUTPUT_SPECIES_NAMES[11]=H2O2
				CXR_OUTPUT_SPECIES_NAMES[12]=ISOP
				CXR_OUTPUT_SPECIES_NAMES[13]=PNA
				CXR_OUTPUT_SPECIES_NAMES[14]=SO2
				CXR_OUTPUT_SPECIES_NAMES[15]=NH3
				CXR_OUTPUT_SPECIES_NAMES[16]=PH2O
				CXR_OUTPUT_SPECIES_NAMES[17]=PNO3
				CXR_OUTPUT_SPECIES_NAMES[18]=PSO4
				CXR_OUTPUT_SPECIES_NAMES[19]=PNH4
				CXR_OUTPUT_SPECIES_NAMES[20]=POA
				CXR_OUTPUT_SPECIES_NAMES[21]=PEC
				CXR_OUTPUT_SPECIES_NAMES[22]=SOA1
				CXR_OUTPUT_SPECIES_NAMES[23]=SOA2
				CXR_OUTPUT_SPECIES_NAMES[24]=SOA3
				CXR_OUTPUT_SPECIES_NAMES[25]=SOA4
				CXR_OUTPUT_SPECIES_NAMES[26]=SOA5
				CXR_OUTPUT_SPECIES_NAMES[27]=SOA6
				CXR_OUTPUT_SPECIES_NAMES[28]=SOA7
				CXR_OUTPUT_SPECIES_NAMES[29]=SOPA
				CXR_OUTPUT_SPECIES_NAMES[30]=SOPB
				CXR_OUTPUT_SPECIES_NAMES[31]=NA
				CXR_OUTPUT_SPECIES_NAMES[32]=PCL
				CXR_OUTPUT_SPECIES_NAMES[33]=FPRM
				CXR_OUTPUT_SPECIES_NAMES[34]=FCRS
				CXR_OUTPUT_SPECIES_NAMES[35]=CPRM
				CXR_OUTPUT_SPECIES_NAMES[36]=CCRS
				;;
			
			*)	main.dieGracefully "The chemical mechanism ${CXR_CHEMICAL_MECHANISM} is not supported by this configuration file"
				;;
			
		esac # Chemical Mechanism
		;;
		
	*) main.dieGracefully "The aerosol mechanism ${CXR_AEROSOL_MECHANISM} is not supported by this configuration file!"
	   ;;
		
		
esac # Aerosol Mechanism

# Automatically count # species (subtract 1 for dummy)
CXR_NUMBER_OF_OUTPUT_SPECIES=$(( ${#CXR_OUTPUT_SPECIES_NAMES[@]} - 1 ))

################################################################################
# Probing settings not included here
################################################################################

################################################################################
# Options for extraction of NABEL station data
################################################################################

# We will write a small .pro file with this and
# load it using the @-notation

# The Coordinates are expressed in terms of grid cells
# of the 3rd Grid and needs to be changed if the grid definition changes

# Entry 0 no dummy here!

# unset arrays first
unset CXR_STATION
unset CXR_STATION_X
unset CXR_STATION_Y

CXR_STATION[0]=basel
CXR_STATION_X[0]=44.62
CXR_STATION_Y[0]=73.26

CXR_STATION[1]=bern
CXR_STATION_X[1]=42.15
CXR_STATION_Y[1]=51.21

CXR_STATION[2]=chaumont
CXR_STATION_X[2]=30.34
CXR_STATION_Y[2]=54.34

CXR_STATION[3]=davos
CXR_STATION_X[3]=103.53
CXR_STATION_Y[3]=50.23

CXR_STATION[4]=duebendorf
CXR_STATION_X[4]=70.68
CXR_STATION_Y[4]=69.65

CXR_STATION[5]=haerkingen
CXR_STATION_X[5]=51.02
CXR_STATION_Y[5]=65.10

CXR_STATION[6]=jungfrau
CXR_STATION_X[6]=56.76
CXR_STATION_Y[6]=37.05

CXR_STATION[7]=laegern
CXR_STATION_X[7]=64.28
CXR_STATION_Y[7]=72.05

CXR_STATION[8]=lausanne
CXR_STATION_X[8]=22.55
CXR_STATION_Y[8]=34.43

CXR_STATION[9]=lugano
CXR_STATION_X[9]=82.88
CXR_STATION_Y[9]=18.78

CXR_STATION[10]=magadino
CXR_STATION_X[10]=81.90
CXR_STATION_Y[10]=24.27

CXR_STATION[11]=payerne
CXR_STATION_X[11]=29.85
CXR_STATION_Y[11]=45.54

CXR_STATION[12]=rigi
CXR_STATION_X[12]=67.73
CXR_STATION_Y[12]=57.02

CXR_STATION[13]=sion
CXR_STATION_X[13]=41.00
CXR_STATION_Y[13]=24.05

CXR_STATION[14]=taenikon
CXR_STATION_X[14]=77.78
CXR_STATION_Y[14]=72.99

CXR_STATION[15]=zurich
CXR_STATION_X[15]=68.66
CXR_STATION_Y[15]=68.52

# We count the number (do not change unless you know why)
CXR_NUMBER_OF_STATIONS=${#CXR_STATION[@]}

################################################################################
# Name/Path of the CAMx.in file
################################################################################

# A rule that must be expanded
CXR_MODEL_CTRL_FILE_RULE='${CXR_STATE_DIR}/CAMx.${CXR_DATE_RAW}.in'

################################################################################
# Machine name
################################################################################

CXR_MACHINE=$(uname -n)

################################################################################
# The OPM and EXEC Settings are machine-dependent.
################################################################################ 
# Are we on a multicore system?
CXR_NUM_CORES=$(main.countCores)

# Maximal number of parallel processes in the CAMxRunner
if [[ "$CXR_PARALLEL_PROCESSING" == true  ]]
then
	# By default, use the number of cores
	CXR_MAX_PARALLEL_PROCS=$CXR_NUM_CORES
else
	# Non-Parallel use 1 process
	CXR_MAX_PARALLEL_PROCS=1
fi

# This can be either None, OMP or MPI (MPI is not currently implemented). OMP is recommended.
# the CAMx executable mifust provide this!
CXR_PARALLEL_PARADIGM=OMP

################################################################################
# OpenMP settings
################################################################################
# Switch on OMP
# If num_cores=1, OMP is turned off

# Number of CPUS
export NCPUS=$CXR_NUM_CORES

# Set number of OpenMP threads (usually equals CPU number)
export OMP_NUM_THREADS=$CXR_NUM_CORES

# Per Thread stack size. Can lead to problems if both to large or too small...
export MPSTKZ=128M

################################################################################
# Determine name of executable.
################################################################################

# If you need another executable name,
# set this value to a full path.
#CXR_MODEL_EXEC=/path/to/my/exec
