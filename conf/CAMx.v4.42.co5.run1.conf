#!/bin/bash
#
# Runner script for CAMx 4.42/4.51 - Configuration. 
# See https://wiki.intranet.psi.ch/twiki/bin/edit/LAC/CAMxRunner
# 
# Leave the next line intact, it is used for change detection
# Version: $Id: base.conf 94 2008-07-25 08:48:02Z oderbolz $ 
#
# Written by Daniel Oderbolz (daniel.oderbolz@psi.ch),
# Released under the Creative Commons "Attribution-Share Alike 2.5 Switzerland"
# License, (http://creativecommons.org/licenses/by-sa/2.5/ch/deed.en)
################################################################################
# Who	When		What
# dco 	02.05.2008	Created
#
#
# All Variables (except system variables like OMP*) names start with CXR_
# Output File names end with OUTPUT_FILE
# Input File names end with INPUT_FILE
#
# Arrays of files are called OUTPUT_ARR_FILES AND INPUT_ARR_FILES
#
# Directories with _DIR
# Output directories with OUTPUT_DIR
# Executables with _EXEC
#
# Strings which are used as Floating point numbers, but are integer, need a trailing .
#
# Arrays must have an index 0 with a Dummy entry, we work in Fortran Land here.
#
# Also, entries in arrays which contain spaces must be protected by
# single (') quotes, because arrays are exported as space separated list

################################################################################
# CAMx Version (CXR_CAMX_VERSION) is set by the link name!!
################################################################################


################################################################################
# Labels
################################################################################
export CXR_MM5_PROJECT=co5
export CXR_MM5_SCENARIO=s160

export CXR_EMMISS_PROJECT=${CXR_MM5_PROJECT}
export CXR_EMMISS_SCENARIO=sem050

export CXR_CAMX_SCENARIO=${CXR_MM5_SCENARIO}	
export CXR_CAMX_PERIOD=winter${CXR_YEAR_S}
export CXR_CAMX_CUSTOMER=cost728

export CXR_STATION_LABEL=NABEL

################################################################################
# Directories
################################################################################

export CXR_BASE_DIR=/mnt/other/lacfs02/barmpadimos/CAMX4.4/${CXR_CAMX_CUSTOMER}/${CXR_CAMX_PERIOD}
export CXR_INPUT_DIR=${CXR_BASE_DIR}/Inputs
export CXR_METEO_DIR=/mnt/other/lacfs02/jkeller/linuxmm5/out
export CXR_LANDUSE_DIR=/mnt/other/lacfs02/andreani_s/CAMX4.4/Bafu3/Inputs/Ascii
export CXR_EMISSION_DIR=${CXR_BASE_DIR}/Emiss
export CXR_PTSRCE_DIR=${CXR_BASE_DIR}/Ptsrce

# Input preparation directories
export CXR_EMISSION_SOURCE_DIR=/mnt/other/lacfs02/jkeller/emiss/emisscamx


# Replace machine name if needed!
export CXR_OUTPUT_DIR=${CXR_BASE_DIR}/Outputs/$(llcx)/${CXR_CAMX_SCENARIO}

# Probing output dirs
export CXR_PA_OUTPUT_DIR=${CXR_OUTPUT_DIR}/PA
export CXR_DDM_OUTPUT_DIR=${CXR_OUTPUT_DIR}/DDM
export CXR_RT_OUTPUT_DIR=${CXR_OUTPUT_DIR}/RT
export CXR_SA_OUTPUT_DIR=${CXR_OUTPUT_DIR}/SA

export CXR_AQMFAD_OUTPUT_DIR=${CXR_OUTPUT_DIR}/aqmfad
export CXR_STATION_OUTPUT_DIR=${CXR_OUTPUT_DIR}/Nabel

# This is the IDL procedure for the extraction
# Because it is not executable, we treat it as an input file
export CXR_STATION_PROC_INPUT_FILE=/afs/psi.ch/user/o/oderbolz/@scripts/idl/extract_nabel_stations.pro

# This is the IDL File with the parameters for the NABEL extraction
# It is written by this bash-script
# If you change the name of this script, change the @nabel_stations_parm line in extract_nabel_stations.pro
export CXR_STATION_PARM_FILE=/afs/psi.ch/user/o/oderbolz/@scripts/idl/nabel_stations_parm.pro

#Base path to find the CAMx executable
export CXR_CAMX_DIR=./bin/${CXR_CAMX_VERSION}

# Where is the Chemparam file (dependent on CAMx executable and mechanism)
export CXR_CHEMPARAM_INPUT_FILE=${CXR_CAMX_DIR}/chemparam/CAMx${CXR_CAMX_VERSION}.chemparam.${CXR_MECHANISM}

################################################################################
# CAMxRunner specific settings
################################################################################

################################################################################
# If you want to disable modules of the CAMxRunner, do it here
################################################################################

# Set this to false to disable CAMx in this run
export CXR_RUN_CAMx=true

# This string contains the space-separated names (full filename without path) of
# unwanted single day preprocessors like "01_convert_emissions.sh"
export CXR_UNNEEDED_SINGLE_PREPROC=""

# This string contains the space-separated names (full filename without path) of
# unwanted pre-start preprocessors like "01_convert_emissions.sh"
export CXR_UNNEEDED_PRE_START_PREPROC=""


# This string contains the space-separated names (full filename without path) of
# unwanted single day postprocessors like "01_convert_emissions.sh"
export CXR_UNNEEDED_SINGLE_POSTPROC=""

# This string contains the space-separated names (full filename without path) of
# unwanted finish postprocessors like "01_convert_emissions.sh"
export CXR_UNNEEDED_FINISH_POSTPROC=""

################################################################################
# CXR_RUN_DIR is set by the runner.

# Logs go here
export CXR_LOG_OUTPUT_DIR=${CXR_RUN_DIR}/log

#State information is stored here
export CXR_STATE_DIR=${CXR_RUN_DIR}/state/$CXR_RUN

#Preprocessors
# These are run for each simulation day
export CXR_PREPROCESSOR_SINGLE_INPUT_DIR=${CXR_RUN_DIR}/preproc/${CXR_CAMX_VERSION}/single

#These are run before the simulation starts
export CXR_PREPROCESSOR_PRE_START_INPUT_DIR=${CXR_RUN_DIR}/preproc/${CXR_CAMX_VERSION}/pre-start

#Postprocessors

# These are run for each simulation day
export CXR_POSTPROCESSOR_SINGLE_INPUT_DIR=${CXR_RUN_DIR}/postproc/${CXR_CAMX_VERSION}/single

#These are run once the whole simulation has finished
export CXR_POSTPROCESSOR_FINISH_INPUT_DIR=${CXR_RUN_DIR}/postproc/${CXR_CAMX_VERSION}/finish

# Define Logfile
export CXR_LOG=${CXR_LOG_OUTPUT_DIR}/${CXR_RUN}_$(date +"%Y_%m_%d_%H_%M")${CXR_LOG_EXT}.log

# Do we run postprocessing parallel?
# Currently not implemented, should be set to false
export CXR_PARALLEL_POSTPROCESSING=false

# Define the prefix for disabled scripts (no dot please)
export CXR_DISABLED_EXT=disabled

# Stages that the stage controller knows
export CXR_STATE_CONTINUE=CONTINUE
export CXR_STATE_START=START
export CXR_STATE_STOP=STOP
export CXR_STATE_ERROR=ERROR

# Change this in case the name of the runner script changes
export CXR_RUNNER_NAME=CAMxRunner.sh

# Each run must start with this string
export CXR_RUN_NAME_START=CAMx.

# Used to tell a single step from all steps
export CXR_RUN_ALL=all

################################################################################
# CAMxRunner Internal stuff
################################################################################

# Supported CAMx Versions (space separated)
# 4.51 is not really supported, but 
export CXR_SUPPORTED_CAMX_VERSIONS="4.42 4.51"

# Comma separated list of subdirectories which must be in $CXR_RUN_DIR
export CXR_RUN_SUBDIRS="bin conf common doc log preproc postproc state templates"

# Comma separated list of subdirectories containig version-specific driectories
export CXR_RUN_VERSION_SUBDIRS="bin common preproc postproc"


################################################################################
# Rules for filenames (See https://wiki.intranet.psi.ch/twiki/bin/edit/LAC/CAMxRunner#FileRules)
#
# There are more filerules in the Probing sections of this file
#
# These ABSOLUTELY need 'single quotes' around them, else the shell resolves the rules here!
################################################################################

################## Grid independent ############################################

# Input Preparation ############################################################


# Input ########################################################################

export CXR_PHOTOLYIS_RATES_FILE_RULE='${CXR_INPUT_DIR}/tuv_${CXR_CAMX_CUSTOMER}_${CXR_CAMX_PERIOD}.out'
export CXR_INITIAL_CONDITIONS_FILE_RULE='${CXR_INPUT_DIR}/ic_${CXR_CAMX_CUSTOMER}_moz_${CXR_CAL}${CXR_MONTH}${CXR_YEAR}.bin'
export CXR_BOUNDARY_CONDITIONS_FILE_RULE='${CXR_INPUT_DIR}/bc_${CXR_CAMX_CUSTOMER}_moz_${CXR_YEAR_S}${CXR_MONTH}${CXR_CAL}.bin'
export CXR_TOP_CONCENTRATIONS_FILE_RULE='${CXR_INPUT_DIR}/topconc_${CXR_CAMX_CUSTOMER}_${CXR_CAMX_PERIOD}.${CXR_ASC_EXT}'
export CXR_ALBEDO_HAZE_OZONE_FILE_RULE='${CXR_INPUT_DIR}/ahomap_${CXR_CAMX_CUSTOMER}_3grids_${CXR_CAMX_PERIOD}.out'
export CXR_POINT_SOURCES_FILE_RULE=''

export CXR_MASTER_GRID_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.inst'
export CXR_NESTED_GRID_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.finst'

# More restart rules in the probing sections later

export CXR_PIG_RESTART_FILE_RULE=''

export CXR_ROOT_OUTPUT_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_CAL}'

# File Roots for probing
export CXR_PA_ROOT_OUTPUT_FILE_RULE='$CXR_PA_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_CAL}'

export CXR_DDM_ROOT_OUTPUT_FILE_RULE='$CXR_DDM_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_CAL}'
export CXR_RT_ROOT_OUTPUT_FILE_RULE='$CXR_RT_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_CAL}'
export CXR_SA_ROOT_OUTPUT_FILE_RULE='$CXR_SA_OUTPUT_DIR/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_CAL}'

# These are used 
#	* to prevent overwriting of existing files 
#	* the creation of the aqmfad directory
#	* to convert the binary output files

export CXR_DIAG_FILE_RULE='${CXR_ROOT_OUTPUT}.diag'
export CXR_FINST_FILE_RULE='${CXR_ROOT_OUTPUT}.finst'
export CXR_INST_FILE_RULE='${CXR_ROOT_OUTPUT}.inst'
export CXR_MASS_FILE_RULE='${CXR_ROOT_OUTPUT}.mass'
export CXR_OUT_FILE_RULE='${CXR_ROOT_OUTPUT}.out'

################## NABEL (Station dependent)#####################################

# The local variable $station will be replaced by the actual name of the station in question
export CXR_STATION_FILE_RULE='${CXR_STATION_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}${CXR_CAL}_${station}.dat'

# This is the name of the cumulated file
export CXR_CUMULATIVE_STATION_FILE_RULE='${CXR_STATION_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR_S}${CXR_MONTH}_${station}-complete.dat'

################## Grid spcecific ##############################################

# These NEED the variable ${i} somewhere (the grid number)

# Input Preparation ############################################################

export CXR_EMISSION_SOURCE_FILE_RULE='${CXR_EMISSION_SOURCE_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_EMMISS_SCENARIO}/camx_emiss_domain${i}_${CXR_MM5_PROJECT}_${CXR_EMMISS_SCENARIO}_${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.asc'


# Input ########################################################################

#Landuse
export CXR_LANDUSE_FILE_RULE='${CXR_INPUT_DIR}/terrain_domain${i}_bx3_lucamx.bin'

# Pressure
export CXR_PRESSURE_FILE_RULE='${CXR_METEO_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_MM5_SCENARIO}/camx_zp_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}'
                
# Wind
export CXR_WIND_FILE_RULE='${CXR_METEO_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_MM5_SCENARIO}/camx_uv_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}'
                
# Temperature
export CXR_TEMPERATURE_FILE_RULE='${CXR_METEO_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_MM5_SCENARIO}/camx_tp_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}'
                
# Vapor
export CXR_VAPOR_FILE_RULE='${CXR_METEO_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_MM5_SCENARIO}/camx_qa_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}'
                
# Cloud
export CXR_CLOUD_FILE_RULE='${CXR_METEO_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_MM5_SCENARIO}/camx_cr_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}'
                
# Vertical K
export CXR_K_FILE_RULE='${CXR_METEO_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_MM5_SCENARIO}/camx_kv_CMAQ_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}'
                
# Emissions
export CXR_EMISSION_FILE_RULE='${CXR_EMISSION_DIR}/camx_emiss_domain${i}_${CXR_EMMISS_PROJECT}_${CXR_EMMISS_SCENARIO}_${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.bin'

# Output #######################################################################

#Deposition file
export CXR_DEPN_FILE_RULE='${CXR_ROOT_OUTPUT}.depn.grd0${i}'

export CXR_AVG_FILE_RULE='${CXR_ROOT_OUTPUT}.avrg.grd0${i}'  

# We create the ASCII version of thefiles in the aqmfad directory      
# All rules start with the CXR_AQMFAD_OUTPUT_DIR and end with ${CXR_ASC_EXT}    	              	
export CXR_AVG_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.avrg.grd0${i}.${CXR_ASC_EXT}'

# Landuse ASCII File must not be created, it is used directly
export CXR_LANDUSE_ASC_FILE_RULE='${CXR_LANDUSE_DIR}/terrain_domain${i}_bx3_terrcamx.${CXR_ASC_EXT}'
export CXR_PRESSURE_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_zp_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}.${CXR_ASC_EXT}'
export CXR_WIND_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_uv_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}.${CXR_ASC_EXT}'
export CXR_TEMPERATURE_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_tp_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}.${CXR_ASC_EXT}'
export CXR_VAPOR_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_qa_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}.${CXR_ASC_EXT}'
export CXR_CLOUD_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_cr_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}.${CXR_ASC_EXT}'
export CXR_K_ASC_FILE_RULE='${CXR_AQMFAD_OUTPUT_DIR}/camx_kv_CMAQ_domain${i}_${CXR_MM5_PROJECT}_${CXR_MM5_SCENARIO}:${CXR_YEAR}-${CXR_MONTH}${CXR_CAL_METEO}.${CXR_ASC_EXT}'		

#aqmfad does not consider emissions and clouds

# Aqmfad options
# This is treated like an array
#export RUN_AQMFAD_ON_GRID="1 2 3"
export RUN_AQMFAD_ON_GRID="3"

################################################################################
# Notification options
################################################################################
export CXR_MAILADDR=daniel.oderbolz@psi.ch
export CXR_SMSNR=0765888275
export CXR_SMSADDR=${CXR_SMSNR}@sms.switch.ch

#If this Variable is true, SMS will be sent
export CXR_SEND_SMS=false

################################################################################
# Timespan of simulation
################################################################################

#The year and months we are running
export CXR_YEAR=2004
export CXR_YEAR_S=04  

#You can simulate more thon 1 month by specifying a different end month
export CXR_START_MONTH=01
export CXR_END_MONTH=01

# These are the days we are simulating - normally you do not have to specify this
# If you do, just these days will be simulated, but ONLY if
# the start and the endmonth are equal!

# Here, we need double quotes because of word-splitting
# But as said above, normally this is commendet out (generated automatically)
# export CXR_DAYS="01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"


# Must be in HHHH Format
export CXR_START_HOUR=0000
export CXR_STOP_HOUR=2400

# Timezone (0=UTC,5=EST,6=CST,7=MST,8=PST)
export CXR_TIME_ZONE=0

# The Simulation intervals in Minutes
export CXR_MAXIMUM_TIMESTEP=15
export CXR_MET_INPUT_FREQUENCY=60
export CXR_EMS_INPUT_FREQUENCY=60
export CXR_OUTPUT_FREQUENCY=60

################################################################################
# Geometry of simulation
################################################################################

export CXR_MAP_PROJECTION=LAMBERT # (LAMBERT,POLAR,UTM,LATLON)

export CXR_UTM_ZONE=0

# Floats
export CXR_POLAR_LONGITUDE_POLE=0.        # deg (west<0south<0)
export CXR_POLAR_LATITUDE_POLE=0.         # deg (west<0south<0)
export CXR_LAMBERT_CENTER_LONGITUDE=3.5   # deg (west<0south<0)
export CXR_LAMBERT_CENTER_LATITUDE=47.    # deg (west<0south<0)
export CXR_LAMBERT_TRUE_LATITUDE1=46.     # deg (west<0south<0)
export CXR_LAMBERT_TRUE_LATITUDE2=48.     # deg (west<0south<0)
	
################################################################################
# Grid definition
################################################################################

# How many grids are used?
export CXR_NUMBER_OF_GRIDS=3

# Of course, more grids mean more settings down here

#Master grid
export CXR_MASTER_ORIGIN_XCOORD=-1282.5       # km or deg SW corner of cell(11)
export CXR_MASTER_ORIGIN_YCOORD=-1066.5       # km or deg SW corner of cell (11)

# Floats
export CXR_MASTER_CELL_XSIZE=27.               # km or deg
export CXR_MASTER_CELL_YSIZE=27.               # km or deg


export CXR_MASTER_GRID_COLUMNS=95
export CXR_MASTER_GRID_ROWS=79

CXR_NUMBER_OF_LAYERS[1]=14

# Grid 0 and 1 are dummies
CXR_NEST_MESHING_FACTOR[0]=-        
CXR_NEST_BEG_I_INDEX[0]=-          
CXR_NEST_END_I_INDEX[0]=-          
CXR_NEST_BEG_J_INDEX[0]=-          
CXR_NEST_END_J_INDEX[0]=-          
CXR_NUMBER_OF_LAYERS[0]=-

# This is a dummy because entries 1 are given by the MASTER settings
CXR_NEST_MESHING_FACTOR[1]=-        
CXR_NEST_BEG_I_INDEX[1]=-          
CXR_NEST_END_I_INDEX[1]=-          
CXR_NEST_BEG_J_INDEX[1]=-         
CXR_NEST_END_J_INDEX[1]=- 

# Number of layers set above         

# Second grid
CXR_NEST_MESHING_FACTOR[2]=3        # Relative to master grid
CXR_NEST_BEG_I_INDEX[2]=51          # Relative to master grid
CXR_NEST_END_I_INDEX[2]=74          # Relative to master grid
CXR_NEST_BEG_J_INDEX[2]=32          # Relative to master grid
CXR_NEST_END_J_INDEX[2]=49          # Relative to master grid
CXR_NUMBER_OF_LAYERS[2]=14
	
# Third grid
CXR_NEST_MESHING_FACTOR[3]=9        # Relative to master grid
CXR_NEST_BEG_I_INDEX[3]=55          # Relative to master grid
CXR_NEST_END_I_INDEX[3]=68          # Relative to master grid
CXR_NEST_BEG_J_INDEX[3]=35          # Relative to master grid
CXR_NEST_END_J_INDEX[3]=44          # Relative to master grid
CXR_NUMBER_OF_LAYERS[3]=14

# Export the arrays using 08_array_functions.sh
export_array CXR_NUMBER_OF_LAYERS
export_array CXR_NEST_MESHING_FACTOR
export_array CXR_NEST_BEG_I_INDEX
export_array CXR_NEST_END_I_INDEX
export_array CXR_NEST_BEG_J_INDEX
export_array CXR_NEST_END_J_INDEX
export_array CXR_NUMBER_OF_LAYERS

################################################################################
# Model options (Solver etc.)
################################################################################
export CXR_DIAGNOSTIC_ERROR_CHECK=false    # True=will stop before 1st timestep
export CXR_ADVECTION_SOLVER=PPM      # (PPM,BOTT)
export CXR_CHEMISTRY_SOLVER=CMC      # (CMC,IEH,LSODE)

export CXR_PROBING_TOOL=None     # (None,OSAT,PSAT,GOAT,APCA,DDM,PA,RTRAC)
export CXR_CHEMISTRY=true
export CXR_DRY_DEPOSITION=true
export CXR_WET_DEPOSITION=true
export CXR_STAGGERED_WINDS=true
export CXR_GRIDDED_EMISSIONS=true
export CXR_POINT_EMISSIONS=false
export CXR_IGNORE_EMISSION_DATES=true

# Generate PIG relevant code
export CXR_PLUME_IN_GRID=false
export CXR_PIG_SUBMODEL=None     # (None,GREASD,IRON)


################################################################################
################################################################################
# Changes below this Comment are rather unusual
################################################################################
################################################################################

################################################################################
# Emission settings 
################################################################################


################################################################################
# Output specifications
################################################################################

export CXR_AVERAGE_OUTPUT_3D=true
export CXR_HDF_FORMAT_OUTPUT=false

################################################################################
# Chemical Mechanism
################################################################################

export CXR_MECHANISM=4_CF

################################################################################
# Chemical species
################################################################################

export CXR_NUMBER_OF_OUTPUT_SPECIES=26
# Entry 0 is a dummy, we want our arrays to start with index 1
CXR_OUTPUT_SPECIES_NAMES[0]=-
CXR_OUTPUT_SPECIES_NAMES[1]=NO
CXR_OUTPUT_SPECIES_NAMES[2]=NO2
CXR_OUTPUT_SPECIES_NAMES[3]=O3
CXR_OUTPUT_SPECIES_NAMES[4]=TOL
CXR_OUTPUT_SPECIES_NAMES[5]=XYL
CXR_OUTPUT_SPECIES_NAMES[6]=FORM
CXR_OUTPUT_SPECIES_NAMES[7]=PAN
CXR_OUTPUT_SPECIES_NAMES[8]=CO
CXR_OUTPUT_SPECIES_NAMES[9]=HONO
CXR_OUTPUT_SPECIES_NAMES[10]=HNO3
CXR_OUTPUT_SPECIES_NAMES[11]=H2O2
CXR_OUTPUT_SPECIES_NAMES[12]=ISOP
CXR_OUTPUT_SPECIES_NAMES[13]=PNA
CXR_OUTPUT_SPECIES_NAMES[14]=SO2
CXR_OUTPUT_SPECIES_NAMES[15]=NH3
CXR_OUTPUT_SPECIES_NAMES[16]=PH2O
CXR_OUTPUT_SPECIES_NAMES[17]=PNO3
CXR_OUTPUT_SPECIES_NAMES[18]=PSO4
CXR_OUTPUT_SPECIES_NAMES[19]=PNH4
CXR_OUTPUT_SPECIES_NAMES[20]=POA
CXR_OUTPUT_SPECIES_NAMES[21]=PEC
CXR_OUTPUT_SPECIES_NAMES[22]=SOA1
CXR_OUTPUT_SPECIES_NAMES[23]=SOA2
CXR_OUTPUT_SPECIES_NAMES[24]=SOA3
CXR_OUTPUT_SPECIES_NAMES[25]=SOA4
CXR_OUTPUT_SPECIES_NAMES[26]=SOA5

# Exporting Arrays

export_array CXR_OUTPUT_SPECIES_NAMES

################################################################################
# Probing settings
################################################################################

# Set probing only if needed
if [ "$CXR_PROBING_TOOL" != "None" ]
then

	export CXR_NUMBER_OF_PA_DOMAINS=2
	
	# Entry 0 is a dummy, we want our arrays to start with index 1
	CXR_WITHIN_CAMX_GRID[0]=-  
	CXR_PA_BEG_I_INDEX[0]=-
	CXR_PA_END_I_INDEX[0]=-
	CXR_PA_BEG_J_INDEX[0]=-
	CXR_PA_END_J_INDEX[0]=-
	CXR_PA_BEG_K_INDEX[0]=-
	CXR_PA_END_K_INDEX[0]=-
	
	
	CXR_WITHIN_CAMX_GRID[1]=3  # Specify which CAMx grid that this PA domain is in
	CXR_PA_BEG_I_INDEX[1]=62
	CXR_PA_END_I_INDEX[1]=76
	CXR_PA_BEG_J_INDEX[1]=63
	CXR_PA_END_J_INDEX[1]=74
	CXR_PA_BEG_K_INDEX[1]=1
	CXR_PA_END_K_INDEX[1]=5
	
	CXR_WITHIN_CAMX_GRID[2]=3  # Specify which CAMx grid that this PA domain is in
	CXR_PA_BEG_I_INDEX[2]=75
	CXR_PA_END_I_INDEX[2]=92
	CXR_PA_BEG_J_INDEX[2]=14
	CXR_PA_END_J_INDEX[2]=30
	CXR_PA_BEG_K_INDEX[2]=1
	CXR_PA_END_K_INDEX[2]=5
	
	# Exporting Arrays 
	
	export_array CXR_WITHIN_CAMX_GRID
	export_array CXR_PA_BEG_I_INDEX
	export_array CXR_PA_END_I_INDEX
	export_array CXR_PA_BEG_J_INDEX
	export_array CXR_PA_END_J_INDEX
	export_array CXR_PA_BEG_K_INDEX
	export_array CXR_PA_END_K_INDEX

fi


################################################################################
### All following settings for OSAT, PSAT, DDM and RTRAC come from the       ###
### sample file of CAMx 4.51. They are untested.			     ###
################################################################################

################################################################################
# Probing settings: OSAT/PSAT
################################################################################
if [ "$CXR_PROBING_TOOL" == "OSAT" -o "$CXR_PROBING_TOOL" == "PSAT" -o "$CXR_PROBING_TOOL" == "GOAT" -o "$CXR_PROBING_TOOL" == "APCA" ] 
then

	export CXR_SA_SUMMARY_OUTPUT=true
	
	export CXR_SA_MASTER_SFC_OUTPUT=true
	export CXR_SA_NESTED_SFC_OUTPUT=true
	export CXR_SA_STRATIFY_BOUNDARY=true
	export CXR_SA_NUMBER_OF_SOURCE_REGIONS=10
	export CXR_SA_NUMBER_OF_SOURCE_GROUPS=3
	export CXR_USE_LEFTOVER_GROUP=false
	export CXR_NUMBER_OF_TIMING_RELEASES=0
	export CXR_PSAT_TREAT_SULFATE_CLASS=false
	export CXR_PSAT_TREAT_NITRATE_CLASS=true
	export CXR_PSAT_TREAT_SOA_CLASS=false
	export CXR_PSAT_TREAT_PRIMARY_CLASS=false
	export CXR_PSAT_TREAT_MERCURY_CLASS=false
	export CXR_PSAT_TREAT_OZONE_CLASS=false
	
	# OSAT Input Files
	
	export CXR_SA_RECEPTOR_DEFINITIONS_INPUT_FILE='osat.rcp.def.dat'
	
	##################Source group and grid specific########################
	
	# The first index is the source group, the second is the grid
	export CXR_SA_EMISS_GROUP_GRID_1_1_INPUT_FILE=''
	
	# OSAT FILE RULES non-specific
	
	export CXR_SA_MASTER_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.osat.inst'
	export CXR_SA_NESTED_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.osat.finst'
	
	##################Grid spcecific########################################
	# These NEED the variable ${i} somewhere  (the grid number)
	
	export CXR_SA_SOURCE_AREA_MAP_FILE_RULE='osat.src.area.map.g${i}'
	
	##################Source group specific#################################
	# These NEED the variable ${j} somewhere (the source group number)
	
	export CXR_SA_POINTS_GROUP_FILE_RULE='ptsrc.${j}.${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.bin'
	

################################################################################
# Probing settings:DDM
################################################################################
elif [ "$CXR_PROBING_TOOL" == "DDM" ] 
then

	export CXR_DDM_MASTER_SFC_OUTPUT=true
	export CXR_DDM_NESTED_SFC_OUTPUT=true
	export CXR_DDM_STRATIFY_BOUNDARY=true
	
	export CXR_DDM_NUMBER_OF_SOURCE_REGIONS=10
	export CXR_DDM_NUMBER_OF_SOURCE_GROUPS=1
	export CXR_NUMBER_OF_BC_SPECIES_GROUPS=1
	export CXR_NUMBER_OF_EM_SPECIES_GROUPS=2
	export CXR_NUMBER_OF_IC_SPECIES_GROUPS=1
	
	# DDM Input Files
	
	export CXR_DDM_INITIAL_CONDITIONS_INPUT_FILE='ic.generic.bin'
	export CXR_DDM_BOUNDARY_CONDITIONS_INPUT_FILE='bc.generic.bin'
	export CXR_DDM_TOP_CONCENTRATIONS_INPUT_FILE='tc.generic'
	export CXR_DDM_RECEPTOR_DEFINITIONS_INPUT_FILE='ddm.rcp.def.dat'
	
	##################Source group and grid specific########################
	
	# The first index is the source group, the second is the grid
	# You need one file rule for each element for the source group/grid matrix
	export CXR_DDM_EMISS_GROUP_GRID_1_1_FILE_RULE='emiss.utils_1.${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.bin'
	export CXR_DDM_EMISS_GROUP_GRID_1_2_FILE_RULE='emiss.utils_2.${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.bin'
	export CXR_DDM_EMISS_GROUP_GRID_1_3_FILE_RULE='emiss.utils_3.${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.bin'
	
	# DDM FILE RULES non-specific
	export CXR_DDM_MASTER_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.ddm.inst'
	export CXR_DDM_NESTED_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.ddm.finst'
	
	CXR_EMIS_SPECIES_GROUPS[1]=O3
	CXR_EMIS_SPECIES_GROUPS[1]=NOX
	
	CXR_IC_SPECIES_GROUPS[1]=O3
	
	CXR_BC_SPECIES_GROUPS[1]=O3
	
	export_array CXR_EMIS_SPECIES_GROUPS
	export_array CXR_IC_SPECIES_GROUPS
	export_array CXR_BC_SPECIES_GROUPS
	
	
	##################Grid spcecific########################################
	# These NEED the variable ${i} somewhere  (the grid number)
	
	export CXR_DDM_SOURCE_AREA_MAP_FILE_RULE='ddm.src.area.map.g${i}'
	
	##################Source group specific#################################
	# These NEED the variable ${j} somewhere (the source group number)
	export CXR_SA_POINTS_GROUP_INPUT_FILE_RULE='ptsrc.${j}.${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.bin' 

################################################################################
# Probing settings:RTRAC
################################################################################
elif [ "$CXR_PROBING_TOOL" == "RTRAC" ] 
then

	export CXR_RT_PIG_SAMPLE=false
	
	# RTRAC Input Files
	export CXR_RT_INITIAL_CONDITIONS_INPUT_FILE=''
	export CXR_RT_BOUNDARY_CONDITIONS_INPUT_FILE=''
	export CXR_RT_TOP_CONCENTRATIONS_INPUT_FILE=''
	export CXR_RT_CHEMISTRY_PARAMETERS_INPUT_FILE='CAMx4.chemparam.rtrac_test'
	export CXR_RT_RECEPTOR_DEFINITIONS_INPUT_FILE='receptor.rtrac.test'
	export CXR_RT_POINT_SOURCES_INPUT_FILE='pt.rtrac.test'
	
	# RTRAC FILE RULES non-specific
	export CXR_RT_MASTER_RESTART_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.rtrac.inst'
	export CXR_RT_NESTED_RESTART_FILE_RULE='${CXR_OUTPUT_DIR}/${CXR_RUN}.${CXR_YEAR}${CXR_MONTH}${CXR_YESTERDAY}.rtrac.finst'
	
	##################Grid spcecific########################################
	# These NEED the variable ${i} somewhere  (the grid number)
	
	export CXR__FILE_RULE='${CXR_EMISSION_SOURCE_DIR}/${CXR_YEAR}${CXR_MONTH}${CXR_CAL}/${CXR_EMMISS_SCENARIO}/camx_emiss_domain${i}_${CXR_MM5_PROJECT}_${CXR_EMMISS_SCENARIO}_${CXR_YEAR}${CXR_MONTH}${CXR_CAL}.asc'
	

fi

################################################################################
# Options for extraction of NABEL station data
################################################################################

export CXR_NUMBER_OF_STATIONS=16

# We will write a small .pro file with this and
# load it using the @-notation

# The Coordinates are expressed in terms of grid cells
# of the 3rd Grid and needs to be changed if the grid definition changes

# Entry 0 no dummy here!

CXR_STATION[0]=basel  
CXR_STATION_X[0]=44.62
CXR_STATION_Y[0]=73.26  

CXR_STATION[1]=bern  
CXR_STATION_X[1]=42.15
CXR_STATION_Y[1]=51.21  

CXR_STATION[2]=chaumont  
CXR_STATION_X[2]=30.34
CXR_STATION_Y[2]=54.34  

CXR_STATION[3]=davos  
CXR_STATION_X[3]=103.53
CXR_STATION_Y[3]=50.23  

CXR_STATION[4]=duebendorf  
CXR_STATION_X[4]=70.68
CXR_STATION_Y[4]=69.65  

CXR_STATION[5]=haerkingen  
CXR_STATION_X[5]=51.02
CXR_STATION_Y[5]=65.10  

CXR_STATION[6]=jungfrau  
CXR_STATION_X[6]=56.76
CXR_STATION_Y[6]=37.05  

CXR_STATION[7]=laegern  
CXR_STATION_X[7]=64.28
CXR_STATION_Y[7]=72.05  

CXR_STATION[8]=lausanne  
CXR_STATION_X[8]=22.55
CXR_STATION_Y[8]=34.43  

CXR_STATION[9]=lugano 
CXR_STATION_X[9]=82.88
CXR_STATION_Y[9]=18.78  

CXR_STATION[10]=magadino  
CXR_STATION_X[10]=81.90
CXR_STATION_Y[10]=24.27  

CXR_STATION[11]=payerne  
CXR_STATION_X[11]=29.85
CXR_STATION_Y[11]=45.54  

CXR_STATION[12]=rigi  
CXR_STATION_X[12]=67.73
CXR_STATION_Y[12]=57.02  

CXR_STATION[13]=sion  
CXR_STATION_X[13]=41.00
CXR_STATION_Y[13]=24.05  

CXR_STATION[14]=taenikon  
CXR_STATION_X[14]=77.78
CXR_STATION_Y[14]=72.99  

CXR_STATION[15]=zurich  
CXR_STATION_X[15]=68.66
CXR_STATION_Y[15]=68.52  

# Exporting Arrays 
export_array CXR_STATION
export_array CXR_STATION_X
export_array CXR_STATION_Y

################################################################################
# Name/Path of the CAMx.in file
################################################################################

# Do not check this file for existence, hence name does not end in _FILE
# The basename must be "CAMx.in"
export CXR_CAMXIN=CAMx.in

################################################################################
# Machine name
################################################################################

export CXR_MACHINE=$(uname -n)


################################################################################
# Executables
################################################################################

#Base path to find the CAMx executable is defined in the directory section!

# The binary to convert bin2asc
export CXR_BIN2ASC_EXEC=~/bin/bin2asc

# The binary to convert Emission ascii to Bin
export CXR_AIRCONV_EXEC=~/bin/airconv

# The binary to convert MM5 Input
export CXR_UAMVASCII_EXEC=~/bin/uamvascii

# Yet another binary to convert MM5 Input
export CXR_AIRASCII_EXEC=~/bin/airascii

#The aqmfad script (Michel's aliases are not set within bash!)
export CXR_AQMFAD_EXEC=/afs/psi.ch/user/a/accedere/@script/aqm2_fad.script

#IDL is needed for the extraction of station specific data

if [ ${CXR_MACHINE} == lcsl5a ]
then	
	# Activate idl
	module add idl/idl-7.0
fi

export CXR_IDL_EXEC=$(which idl)

################################################################################
# bin2asc conversion
################################################################################
#No leading dot please
export CXR_ASC_EXT=asc

################################################################################
# OpenMP settings (machine dependent)
################################################################################


# The OPM and EXEC Settings are machine-dependent

if [ "$CXR_MACHINE" == lcsl5a ]
then
	# Strong OMP Machine
	
	# camx is a link that points to the executable, machine dependent

	export CXR_EXEC=${CXR_CAMX_DIR}/camx-omp
	
	export NCPUS=8
	export MPSTKZ=512M

	# Set number of OpenMP threads (must find good value empirically)
	export OMP_NUM_THREADS=$NCPUS
	
elif [ "$CXR_MACHINE" == llc5 -o "$CXR_MACHINE" == llc6 ]
then
	# Dualcore
	
	export CXR_EXEC=${CXR_CAMX_DIR}/camx
	
	export NCPUS=2
	export MPSTKZ=128M

	# Set number of OpenMP threads (must find good value empirically)
	export OMP_NUM_THREADS=$NCPUS
else
	# Normal box
	
	export CXR_EXEC=${CXR_CAMX_DIR}/camx
	
	export NCPUS=1
	export MPSTKZ=128M

	# Set number of OpenMP threads (must find good value empirically)
	export OMP_NUM_THREADS=$NCPUS
fi
	

